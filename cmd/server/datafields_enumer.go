// Code generated by "enumer -type=dataFields"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _dataFieldsName = "dfNanosdfMemAllocsdfMemBytesdfMemMBdfLen"

var _dataFieldsIndex = [...]uint8{0, 7, 18, 28, 35, 40}

const _dataFieldsLowerName = "dfnanosdfmemallocsdfmembytesdfmemmbdflen"

func (i dataFields) String() string {
	if i >= dataFields(len(_dataFieldsIndex)-1) {
		return fmt.Sprintf("dataFields(%d)", i)
	}
	return _dataFieldsName[_dataFieldsIndex[i]:_dataFieldsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _dataFieldsNoOp() {
	var x [1]struct{}
	_ = x[dfNanos-(0)]
	_ = x[dfMemAllocs-(1)]
	_ = x[dfMemBytes-(2)]
	_ = x[dfMemMB-(3)]
	_ = x[dfLen-(4)]
}

var _dataFieldsValues = []dataFields{dfNanos, dfMemAllocs, dfMemBytes, dfMemMB, dfLen}

var _dataFieldsNameToValueMap = map[string]dataFields{
	_dataFieldsName[0:7]:        dfNanos,
	_dataFieldsLowerName[0:7]:   dfNanos,
	_dataFieldsName[7:18]:       dfMemAllocs,
	_dataFieldsLowerName[7:18]:  dfMemAllocs,
	_dataFieldsName[18:28]:      dfMemBytes,
	_dataFieldsLowerName[18:28]: dfMemBytes,
	_dataFieldsName[28:35]:      dfMemMB,
	_dataFieldsLowerName[28:35]: dfMemMB,
	_dataFieldsName[35:40]:      dfLen,
	_dataFieldsLowerName[35:40]: dfLen,
}

var _dataFieldsNames = []string{
	_dataFieldsName[0:7],
	_dataFieldsName[7:18],
	_dataFieldsName[18:28],
	_dataFieldsName[28:35],
	_dataFieldsName[35:40],
}

// dataFieldsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func dataFieldsString(s string) (dataFields, error) {
	if val, ok := _dataFieldsNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _dataFieldsNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to dataFields values", s)
}

// dataFieldsValues returns all values of the enum
func dataFieldsValues() []dataFields {
	return _dataFieldsValues
}

// dataFieldsStrings returns a slice of all String values of the enum
func dataFieldsStrings() []string {
	strs := make([]string, len(_dataFieldsNames))
	copy(strs, _dataFieldsNames)
	return strs
}

// IsAdataFields returns "true" if the value is listed in the enum definition. "false" otherwise
func (i dataFields) IsAdataFields() bool {
	for _, v := range _dataFieldsValues {
		if i == v {
			return true
		}
	}
	return false
}
