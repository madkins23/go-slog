// Code generated by "enumer -type=BenchItems"; DO NOT EDIT.

package data

import (
	"fmt"
	"strings"
)

const _BenchItemsName = "RunsNanosMemAllocsMemBytesMbPerSecGbPerSecTbPerSec"

var _BenchItemsIndex = [...]uint8{0, 4, 9, 18, 26, 34, 42, 50}

const _BenchItemsLowerName = "runsnanosmemallocsmembytesmbpersecgbpersectbpersec"

func (i BenchItems) String() string {
	if i >= BenchItems(len(_BenchItemsIndex)-1) {
		return fmt.Sprintf("BenchItems(%d)", i)
	}
	return _BenchItemsName[_BenchItemsIndex[i]:_BenchItemsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BenchItemsNoOp() {
	var x [1]struct{}
	_ = x[Runs-(0)]
	_ = x[Nanos-(1)]
	_ = x[MemAllocs-(2)]
	_ = x[MemBytes-(3)]
	_ = x[MbPerSec-(4)]
	_ = x[GbPerSec-(5)]
	_ = x[TbPerSec-(6)]
}

var _BenchItemsValues = []BenchItems{Runs, Nanos, MemAllocs, MemBytes, MbPerSec, GbPerSec, TbPerSec}

var _BenchItemsNameToValueMap = map[string]BenchItems{
	_BenchItemsName[0:4]:        Runs,
	_BenchItemsLowerName[0:4]:   Runs,
	_BenchItemsName[4:9]:        Nanos,
	_BenchItemsLowerName[4:9]:   Nanos,
	_BenchItemsName[9:18]:       MemAllocs,
	_BenchItemsLowerName[9:18]:  MemAllocs,
	_BenchItemsName[18:26]:      MemBytes,
	_BenchItemsLowerName[18:26]: MemBytes,
	_BenchItemsName[26:34]:      MbPerSec,
	_BenchItemsLowerName[26:34]: MbPerSec,
	_BenchItemsName[34:42]:      GbPerSec,
	_BenchItemsLowerName[34:42]: GbPerSec,
	_BenchItemsName[42:50]:      TbPerSec,
	_BenchItemsLowerName[42:50]: TbPerSec,
}

var _BenchItemsNames = []string{
	_BenchItemsName[0:4],
	_BenchItemsName[4:9],
	_BenchItemsName[9:18],
	_BenchItemsName[18:26],
	_BenchItemsName[26:34],
	_BenchItemsName[34:42],
	_BenchItemsName[42:50],
}

// BenchItemsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BenchItemsString(s string) (BenchItems, error) {
	if val, ok := _BenchItemsNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BenchItemsNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BenchItems values", s)
}

// BenchItemsValues returns all values of the enum
func BenchItemsValues() []BenchItems {
	return _BenchItemsValues
}

// BenchItemsStrings returns a slice of all String values of the enum
func BenchItemsStrings() []string {
	strs := make([]string, len(_BenchItemsNames))
	copy(strs, _BenchItemsNames)
	return strs
}

// IsABenchItems returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BenchItems) IsABenchItems() bool {
	for _, v := range _BenchItemsValues {
		if i == v {
			return true
		}
	}
	return false
}
